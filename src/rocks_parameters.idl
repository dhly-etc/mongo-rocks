# Copyright (C) 2018-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/modules/rocks/src/rocks_engine.h"
        - "mongo/util/concurrency/ticketholder.h"
        - "mongo/util/debug_util.h"

server_parameters:
    rocksConcurrentWriteTransactions:
        description: "Rocks Concurrent Write Transactions"
        set_at: [ startup, runtime ]
        cpp_class:
            name: ROpenWriteTransactionParam
            data: 'TicketHolder*'
            override_ctor: true
    rocksConcurrentReadTransactions:
        description: "Rocks Concurrent Read Transactions"
        set_at: [ startup, runtime ]
        cpp_class:
            name: ROpenReadTransactionParam
            data: 'TicketHolder*'
            override_ctor: true

    rocksdbRuntimeConfigMaxWriteMBPerSec:
        description: 'rate limiter to MB/s'
        set_at: [ startup, runtime ]
        cpp_class:
            name: RocksRateLimiterServerParameter
            data: 'RocksEngine*'
            override_set: true
        condition: { expr: false }

    rocksdbBackup:
        description: 'rocksdb backup'
        set_at: runtime
        cpp_class:
            name: RocksBackupServerParameter
            data: 'RocksEngine*'
            override_set: true
        condition: { expr: false }

    rocksdbCompact:
      description: 'rocksdb compact'
      set_at: runtime
      cpp_class:
            name: RocksCompactServerParameter
            data: 'RocksEngine*'
            override_set: true
      condition: { expr: false }

    rocksdbRuntimeConfigCacheSizeGB:
      description: 'rocks cache sizeGB'
      set_at: startup
      cpp_class:
            name: RocksCacheSizeParameter
            data: 'RocksEngine*'
            override_set: true
      condition: { expr: false }

    rocksdbOptions:
      description: 'set rocksdb options'
      set_at: [ startup, runtime ]
      cpp_class:
            name: RocksOptionsParameter
            data: 'RocksEngine*'
            override_set: true
      condition: { expr: false }

    minSSTFileCountReserved:
      description: 'delete oplogs until minSSTFileCountReserved files exceeds the total max size'
      set_at: [ startup, runtime ]
      cpp_class:
            name: ExportedMinSSTFileCountReservedParameter
            data: 'AtomicWord<std::uint32_t>*'
            override_ctor: true

    rocksdbRuntimeConfigMaxConflictCheckSize:
        description: 'rocksdb max conflict check size'
        set_at: startup
        cpp_class:
            name: RocksdbMaxConflictCheckSizeParameter
            data: 'RocksEngine*'
            override_set: true
        condition: { expr: false }
