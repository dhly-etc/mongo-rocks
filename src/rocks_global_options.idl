# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

global:
    cpp_namespace: "mongo"
    cpp_includes:
        - "mongo/db/modules/rocks/src/rocks_global_options.h"
    configs:
        section: 'RocksDB options'
        source: [ cli, ini, yaml ]

configs:
    # Rocks storage engine options
    "storage.rocksdb.cacheSizeGB":
        description: >-
            maximum amount of memory to allocate for cache;
            Defaults to 3/10 of physical RAM
        arg_vartype: Int
        cpp_varname: 'rocksGlobalOptions.cacheSizeGB'
        short_name: rocksdbCacheSizeGB
        validator:
            gte: 0
            lte: 10000
    "storage.rocksdb.compression":
        description: >-
            block compression algorithm for collection data [none|snappy|zlib|lz4|lz4hc]
        arg_vartype: String
        cpp_varname: 'rocksGlobalOptions.compression'
        short_name: rocksdbCompression
        default: 'snappy'
        validator:
            callback: 'RocksGlobalOptions::validateRocksdbCompressor'
    "storage.rocksdb.maxWriteMBPerSec":
        description: >-
            Maximum speed that RocksDB will write to storage. Reducing this can 
            help reduce read latency spikes during compactions. However, reducing this
            below a certain point might slow down writes. Defaults to 1GB/sec
        arg_vartype: Int
        cpp_varname: 'rocksGlobalOptions.maxWriteMBPerSec'
        short_name: rocksdbMaxWriteMBPerSec
        default: 1024
        validator:
            gte: 1
            lte: 1024
    "storage.rocksdb.configString":
        description: 'RocksDB storage engine custom'
        arg_vartype: String
        cpp_varname: 'rocksGlobalOptions.configString'
        short_name: rocksdbConfigString
        hidden: true
    "storage.rocksdb.crashSafeCounters":
        description: >-
            If true, numRecord and dataSize counter will be consistent 
            even after power failure. If false, numRecord and dataSize 
            might be a bit inconsistent after power failure, but 
            should be correct under normal conditions. Setting this to 
            true will make database inserts a bit slower
        arg_vartype: Bool
        cpp_varname: 'rocksGlobalOptions.crashSafeCounters'
        short_name: rocksdbCrashSafeCounters
        default: false
        hidden: true
    "storage.rocksdb.counters":
        description: 'This is still experimental. Use this only if you know what you are doing'
        arg_vartype: Bool
        cpp_varname: 'rocksGlobalOptions.counters'
        short_name: rocksdbCounters
        default: true
    "storage.rocksdb.singleDeleteIndex":
        description: 'This is still experimental. Use this only if you know what you are doing'
        arg_vartype: Bool
        cpp_varname: 'rocksGlobalOptions.singleDeleteIndex'
        short_name: rocksdbSingleDeleteIndex
        default: false
    "storage.rocksdb.logLevel":
        description: >-
            rocksdb log level [debug|info|warn|error]
        arg_vartype: String
        cpp_varname: 'rocksGlobalOptions.logLevel'
        short_name: rocksdbLogLevel
        default: 'info'
        validator:
            callback: 'RocksGlobalOptions::validateRocksdbLogLevel'
